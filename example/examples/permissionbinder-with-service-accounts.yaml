---
apiVersion: permission.permission-binder.io/v1
kind: PermissionBinder
metadata:
  name: example-with-service-accounts
  namespace: permissions-binder-operator
spec:
  # ConfigMap with LDAP group whitelist
  configMapName: permission-config
  configMapNamespace: permissions-binder-operator
  
  # Prefixes for permission parsing
  prefixes:
    - "COMPANY-K8S"
  
  # Role mapping (LDAP groups → ClusterRoles)
  roleMapping:
    admin: cluster-admin
    developer: edit
    viewer: view
  
  # NEW: ServiceAccount mapping (SA name → ClusterRole)
  # Creates ServiceAccounts automatically for each namespace
  serviceAccountMapping:
    deploy: edit      # For CI/CD deployments (Bamboo, Jenkins, GitLab)
    runtime: view     # For application pods (read-only access)
  
  # NEW: ServiceAccount naming pattern (optional)
  # Default: {namespace}-sa-{name}
  # Available variables: {namespace}, {name}
  serviceAccountNamingPattern: "{namespace}-sa-{name}"
  
  # Examples of created ServiceAccounts:
  # - my-app-sa-deploy  (with edit ClusterRole)
  # - my-app-sa-runtime (with view ClusterRole)

---
# Example: How to use the created ServiceAccounts

# 1. For CI/CD (Bamboo deployment)
# Get token for deploy ServiceAccount:
#   oc sa get-token my-app-sa-deploy -n my-app
#
# Use in Bamboo:
#   export KUBE_TOKEN=$(oc sa get-token my-app-sa-deploy -n my-app)
#   oc login --token=$KUBE_TOKEN --server=https://api.cluster.example.com:6443
#   oc apply -f deployment.yaml -n my-app

# 2. For Application Pods
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: my-application
#   namespace: my-app
# spec:
#   template:
#     spec:
#       serviceAccountName: my-app-sa-runtime
#       containers:
#       - name: app
#         image: my-app:latest
#         # Now has read-only access to namespace resources

